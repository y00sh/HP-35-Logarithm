import boa
from decimal import Decimal
boa.env.enable_gas_profiling()

vypercode = """
@external
@view
def log2(x1: decimal) -> decimal:
    m: decimal = x1
    
    #if argument is < 1, answer will 1/m and negative
    sign: decimal = 1.0
    if m < 1.0:
        m = 1.0/m
        sign = -1.0
    
    
    k: uint8= 0     # will never exceed 256
    t: uint8[8]= [128, 64 ,32 ,16 ,8 ,4 ,2 ,1]
    p: decimal[8]= [340282366920938463463374607431768211456.0 ,18446744073709551616.0 ,4294967296.0 ,65536.0 ,256.0 ,16.0, 4.0 , 2.0]
    
    # not scaling up m here but need it to find k, use an temporary variable temp
    temp: decimal = m
    for i in range(8):  # iterate from 0 to 7
        if temp >= p[i]:
            temp /= p[i] 
            k += t[i]
    
    # the remainder is calculated here based on k      
    m = m / (convert((1 << k), decimal) / 10000000000.0)
    # to get the full decimals of the remainder scale it by 10^10
    
    # initialize lists 
    A: decimal[34] = [
       15000000000.0000000000, 12500000000.0000000000, 
       11250000000.0000000000, 10625000000.0000000000, 
       10312500000.0000000000, 10156250000.0000000000, 
       10078125000.0000000000, 10039062500.0000000000, 
       10019531250.0000000000, 10009765625.0000000000, 
       10004882812.5000000000, 10002441406.2500000000, 
       10001220703.1250000000, 10000610351.5625000000, 
       10000305175.7812500000, 10000152587.8906250000, 
       10000076293.9453125000, 10000038146.9726562500, 
       10000019073.4863281250, 10000009536.7431640625, 
       10000004768.3715820312, 10000002384.1857910156, 
       10000001192.0928955078, 10000000596.0464477539, 
       10000000298.0232238770, 10000000149.0116119385, 
       10000000074.5058059692, 10000000037.2529029846, 
       10000000018.6264514923, 10000000009.3132257462, 
       10000000004.6566128731, 10000000002.3283064365, 
       10000000001.1641532183, 10000000000.5820766091
       ]
     
    log2A: decimal[34] = [
    5849625007.2115618145, 3219280948.8736234787, 
    1699250014.4231236290, 874628412.5033940825, 
    443941193.5845343765, 223678130.2845450826, 
    112272554.2325412033, 56245491.9387810691, 
    28150156.0705403815, 14081943.9280838890, 
    7042690.1124664325, 3521774.8030102723, 
    1760994.8644250603, 880524.3012217690, 
    440268.8682731671, 220136.1136034049, 
    110068.4766748144, 55034.3433064860, 
    27517.1978956128, 13758.6055084113, 
    6879.3043943584, 3439.6526072176, 
    1719.8264061184, 859.9132286866, 
    429.9566207501, 214.9783119767, 
    107.4891563888, 53.7445782945, 
    26.8722891722, 13.4361445924, 
    6.7180722977, 3.3590361492, 
    1.6795180747, 0.8397590373
    ]

    q: uint8[34] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    
    for j in range(34): 
        #print(j)
        #print(m)
        if m >= A[j]:
            m = (m * 10000000000.0)/A[j]
            q[j] = 1
    
    fracbits: decimal = 0.0
    for i in range(34):
        if q[i] == 1:
            fracbits += log2A[i]
    
    #combine all bits into the variable, result
    result: decimal =  sign*(convert(k, decimal) + (fracbits/10000000000.0))
    return result
"""

test = boa.loads(vypercode)
#test = Decimal('18707220957835557353007165858768422651595.9365500927')
#test = Decimal('123.456')
x = Decimal('0.0000000001')
test.log2(x)
test.line_profile().summary()
